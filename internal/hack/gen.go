package main

import (
	"go/ast"
	"go/build"
	"go/doc"
	"go/parser"
	"go/token"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

var (
	tpl = `// Generated by gtest/interal/hack/gen.go

package gtest

import (
  "github.com/smartystreets/assertions"
)

var (
{{range $_, $fn := .DocPkg.Funcs}}{{if hasPrefix $fn.Name "Should"}}  {{$fn.Name}} = assertions.{{$fn.Name}}
{{end}}{{end}})
`
)

func importer(imports map[string]*ast.Object, path string) (*ast.Object, error) {
	pkg := imports[path]
	if pkg == nil {
		name := path[strings.LastIndex(path, "/")+1:]
		pkg = ast.NewObj(ast.Pkg, name)
		pkg.Data = ast.NewScope(nil) // required by ast.NewPackage for dot-import
		imports[path] = pkg
	}
	return pkg, nil
}

func main() {
	log.SetFlags(log.Lshortfile)

	bpkg, err := build.Import("github.com/smartystreets/assertions", "", 0)
	if err != nil {
		log.Fatal(err)
	}

	fset := token.NewFileSet()
	files := make(map[string]*ast.File)
	for _, fname := range bpkg.GoFiles {
		p, err := ioutil.ReadFile(filepath.Join(bpkg.SrcRoot, bpkg.ImportPath, fname))
		if err != nil {
			log.Fatal(err)
		}
		file, err := parser.ParseFile(fset, fname, p, parser.ParseComments)
		if err != nil {
			log.Fatal(err)
		}
		files[fname] = file
	}

	apkg, _ := ast.NewPackage(fset, files, importer, nil)

	dpkg := doc.New(apkg, bpkg.ImportPath, 0)
	// for _, fn := range dpkg.Funcs {
	// 	if strings.HasPrefix(fn.Name, "Should") {
	// 		printer.Fprint(os.Stdout, fset, fn.Decl)
	// 		fmt.Println("")
	// 	}
	// }

	funcMap := template.FuncMap{
		"hasPrefix": strings.HasPrefix,
	}

	tmpl, err := template.New("tpl").Funcs(funcMap).Parse(tpl)
	if err != nil {
		log.Fatalf("parsing: %s", err)
	}

	err = tmpl.Execute(os.Stdout, map[string]interface{}{
		"DocPkg": dpkg,
	})
	if err != nil {
		log.Fatal(err)
	}
}
